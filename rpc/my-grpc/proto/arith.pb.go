// Code generated by protoc-gen-go. DO NOT EDIT.
// source: arith.proto

package pbArith

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArithReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArithReq) Reset()         { *m = ArithReq{} }
func (m *ArithReq) String() string { return proto.CompactTextString(m) }
func (*ArithReq) ProtoMessage()    {}
func (*ArithReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_211289c5d02710c5, []int{0}
}

func (m *ArithReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithReq.Unmarshal(m, b)
}
func (m *ArithReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithReq.Marshal(b, m, deterministic)
}
func (m *ArithReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithReq.Merge(m, src)
}
func (m *ArithReq) XXX_Size() int {
	return xxx_messageInfo_ArithReq.Size(m)
}
func (m *ArithReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithReq.DiscardUnknown(m)
}

var xxx_messageInfo_ArithReq proto.InternalMessageInfo

func (m *ArithReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ArithRsp struct {
	Id                   int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArithRsp) Reset()         { *m = ArithRsp{} }
func (m *ArithRsp) String() string { return proto.CompactTextString(m) }
func (*ArithRsp) ProtoMessage()    {}
func (*ArithRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_211289c5d02710c5, []int{1}
}

func (m *ArithRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithRsp.Unmarshal(m, b)
}
func (m *ArithRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithRsp.Marshal(b, m, deterministic)
}
func (m *ArithRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithRsp.Merge(m, src)
}
func (m *ArithRsp) XXX_Size() int {
	return xxx_messageInfo_ArithRsp.Size(m)
}
func (m *ArithRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ArithRsp proto.InternalMessageInfo

func (m *ArithRsp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ArithRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*ArithReq)(nil), "pbArith.ArithReq")
	proto.RegisterType((*ArithRsp)(nil), "pbArith.ArithRsp")
}

func init() { proto.RegisterFile("arith.proto", fileDescriptor_211289c5d02710c5) }

var fileDescriptor_211289c5d02710c5 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0xca, 0x2c,
	0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x48, 0x72, 0x04, 0x71, 0x95, 0xa4,
	0xb8, 0x38, 0xc0, 0x8c, 0xa0, 0xd4, 0x42, 0x21, 0x3e, 0x2e, 0x26, 0xcf, 0x14, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xd6, 0x20, 0x26, 0xcf, 0x14, 0x25, 0x1d, 0x98, 0x5c, 0x71, 0x01, 0xba, 0x9c, 0x90,
	0x00, 0x17, 0xb3, 0x6f, 0x71, 0xba, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0x69, 0x64,
	0xcd, 0xc5, 0x0a, 0x56, 0x2d, 0x64, 0xc4, 0xc5, 0x11, 0x9c, 0x58, 0xe9, 0x91, 0x9a, 0x93, 0x93,
	0x2f, 0x24, 0xa8, 0x07, 0xb5, 0x48, 0x0f, 0x66, 0x8b, 0x14, 0xba, 0x50, 0x71, 0x81, 0x12, 0x43,
	0x12, 0x1b, 0xd8, 0x59, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x9e, 0x58, 0x08, 0xa5,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArithClient is the rpc-client API for Arith service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArithClient interface {
	SayHello(ctx context.Context, in *ArithReq, opts ...grpc.CallOption) (*ArithRsp, error)
}

type arithClient struct {
	cc *grpc.ClientConn
}

func NewArithClient(cc *grpc.ClientConn) ArithClient {
	return &arithClient{cc}
}

func (c *arithClient) SayHello(ctx context.Context, in *ArithReq, opts ...grpc.CallOption) (*ArithRsp, error) {
	out := new(ArithRsp)
	err := c.cc.Invoke(ctx, "/pbArith.Arith/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithServer is the server API for Arith service.
type ArithServer interface {
	SayHello(context.Context, *ArithReq) (*ArithRsp, error)
}

// UnimplementedArithServer can be embedded to have forward compatible implementations.
type UnimplementedArithServer struct {
}

func (*UnimplementedArithServer) SayHello(ctx context.Context, req *ArithReq) (*ArithRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterArithServer(s *grpc.Server, srv ArithServer) {
	s.RegisterService(&_Arith_serviceDesc, srv)
}

func _Arith_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbArith.Arith/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServer).SayHello(ctx, req.(*ArithReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arith_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbArith.Arith",
	HandlerType: (*ArithServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Arith_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arith.proto",
}
