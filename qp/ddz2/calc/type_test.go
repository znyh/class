package calc

import (
	"fmt"
	"testing"
)

//
//func TestIsHaveBigger(t *testing.T) {
//
//	//seqs := []int32{0x03, 0x13, 0x23, 0x04, 0x14, 0x24, 0x05, 0x15, 0x25, 0x06, 0x16, 0x07}
//	//hand := []int32{0x0a, 0x1a, 0x2a, 0x3a, 0x0b, 0x1b, 0x2b, 0x3b, 0x0c, 0x1c, 0x2c, 0x3c, 0x3d, 0x4e, 0x28}
//	//
//
//	//seqs := []int32{78,22,6,37,21,5,36,20,4,35,19,3}
//	//hand := []int32{7, 23, 39, 55, 8, 24, 40, 56, 9, 25, 41, 57, 10, 26, 42, 58, 79}
//
//	//seqs := []int32{0x03, 0x13, 0x23, 0x04, 0x14, 0x24, 0x05, 0x15, 0x25, 0x06, 0x17, 0x08}
//	//hand := []int32{0x07, 0x17, 0x27, 0x08, 0x18, 0x28, 0x09, 0x19, 0x29, 0x0a, 0x1a, 0x2a}
//
//	seqs := []int32{0x03, 0x13, 0x23, 0x33, 0x14, 0x24, 0x04, 0x34}
//	hand := []int32{0x07, 0x17, 0x27, 0x37, 0x18, 0x28, 0x38, 0x08}
//
//	s1 := NewCardsSet(seqs)
//	s2 := NewCardsSet(hand)
//
//	isbig := s2.HaveBigger(s1)
//
//	fmt.Printf("s1=> ty:%d lv:%d length:%d\n", s1.ct, s1.level, s1.length)
//	fmt.Printf("s2=> ty:%d lv:%d length:%d\n", s2.ct, s2.level, s2.length)
//	fmt.Printf("s2 isbig s1 ? ==> %t\n", isbig)
//}
//
//func TestTips(t *testing.T) {
//	seqs := []int32{0x03, 0x13, 0x23, 0x37, 0x14, 0x24, 0x04, 0x39}
//	hand := []int32{
//		0x07, 0x17, 0x27, 0x37,
//		0x08, 0x18, 0x28, 0x38,
//		0x09, 0x19, 0x29, 0x39,
//		0x0a, 0x1a, 0x2a, 0x3a,
//		0x02, 0x16, 0x4e,
//	}
//
//	Init(true)
//
//	s1 := NewCardsSet(seqs)
//	s2 := NewCardsSet(hand)
//
//	find := s2.Tips(s1)
//	for k, v := range find {
//		fmt.Printf("k:%d last:%s ==> %s\n", k, CardsDesc(s1.seqs), CardsDesc(v.seqs))
//	}
//}

func TestOneDeck(t *testing.T) {
	deck := OneDeck()
	index := ToIndex(deck)
	fmt.Printf("%+v\n", index)
}

func TestCardType(t *testing.T) {

	//seqs := []int32{49, 33, 17, 1, 61, 45, 29, 13, 60, 44, 28, 12, 59, 43, 27, 11}
	//seqs := []int32{0x03, 0x13, 0x23, 0x04, 0x14, 0x24, 0x05, 0x15, 0x25, 0x06, 0x4e, 0x07}
	seqs := []int32{0x03, 0x04, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04}
	magic := []int32{0x01}

	set := NewCardsSet(seqs, magic)

	fmt.Printf("set.size:%+v\nset.guiNum:%d\nset.guiIndex:%+v\nset.count:%+v\n",
		set.size, set.guiNum, set.guiIndex, set.count)
	fmt.Printf("set.countSeq:%+v\n", set.countSeq)
	fmt.Printf("set.cnt:%+v\n", set.cnt)
	fmt.Printf("set.Type:%+v\n", set.cts)
}
