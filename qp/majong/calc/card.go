package calc

import (
	"sort"

	"github.com/znyh/class/qp/base"
)

const (
	MASKCOLOR = 0xF0
	MASKVALUE = 0x0F
)

const (
	MAXINDEX = 34
	MAXCOLOR = 4
)

var (
	// 0 ~ 8, 9 ~ 17, 18 ~ 26, 27 ~ 34
	oneCards = []int32{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, //
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, //
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, //
		0x31, 0x31, 0x31, 0x31,
		0x32, 0x32, 0x32, 0x32,
		0x33, 0x33, 0x33, 0x33,
		0x34, 0x34, 0x34, 0x34,
		0x35, 0x35, 0x35, 0x35,
		0x36, 0x36, 0x36, 0x36,
		0x37, 0x37, 0x37, 0x37,
	}
)

func OneDeck() []int32 {
	return base.SliceCopy(oneCards)
}

func ShuffleDeck() []int32 {
	return base.SliceShuffle(OneDeck())
}

func SortCardsData(cbCardsData [] int32) []int32 {
	sort.Slice(cbCardsData, func(i, j int) bool {
		return cbCardsData[i] < cbCardsData[j]
	})
	return cbCardsData
}

func ValidCardData(cbCardData int32) bool {
	cbValue := cbCardData & MASKVALUE
	cbColor := (cbCardData & MASKCOLOR) >> 4
	return ((cbValue >= 1) && (cbValue <= 9) && (cbColor <= 2)) ||
		((cbValue >= 1) && (cbValue <= 7) && (cbColor == 3))
}

func ToCardsIndex(cbCardsData []int32) []int32 {
	array := make([]int32, MAXINDEX)
	for _, cbCardData := range cbCardsData {
		if index := ToCardIndex(cbCardData); index >= 0 && index < MAXINDEX {
			array[index]++
		}
	}
	return array
}

func ToCardsData(cbCardIndex []int32) []int32 {
	dst := []int32(nil)
	for cbCardIndex, c := range cbCardIndex {
		for j := 0; j < int(c); j++ {
			if cbCardIndex < 0 || cbCardIndex >= MAXINDEX {
				return nil
			}
			cardData := ToCardData(int32(cbCardIndex))
			dst = append(dst, cardData)
		}
	}
	return dst
}

func ToCardIndex(cbCardData int32) int32 {
	return ((cbCardData&MASKCOLOR)>>4)*9 + cbCardData&MASKVALUE - 1
}

func ToCardData(cbCardIndex int32) int32 {
	return ((cbCardIndex / 9) << 4) | (cbCardIndex%9 + 1)
}
